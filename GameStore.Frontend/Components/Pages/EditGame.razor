@page "/editgame"
@page "/editgame/{id:int}"
@inject GamesClient GamesClient
@inject GenresClient GenresClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>@_title</PageTitle>
<h3>@_title</h3>

@if (genres is null || game is null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div class="row">
		<div class="col-md-4 ">
			<EditForm Model="@game" FormName="editGame" OnValidSubmit="HandleSubmitAsync">
				<DataAnnotationsValidator />
				<ValidationSummary />
				<div class="mb-3">
					<label for="name" class="form-label">Name:</label>
					<InputText @bind-Value="game.Name" id="name" class="form-control" />
					<ValidationMessage For="@(() => game.Name)" />
				</div>

				<div class="mb-3">
					<label for="genre" class="form-label">Genre:</label>
					<InputSelect @bind-Value="game.GenreId" id="genre" class="form-control">
						<option value="">Select a genre</option>
						@foreach (var genre in genres)
						{
							<option value="@genre.Id">@genre.Name</option>
						}
					</InputSelect>
					<ValidationMessage For="@(() => game.GenreId)" />
				</div>

				<div class="mb-3">
					<label for="price" class="form-label">Price:</label>
					<InputNumber @bind-Value="game.Price" id="price" class="form-control" />
					<ValidationMessage For="@(() => game.Price)" />
				</div>

				<div class="mb-3">
					<label for="releaseDate" class="form-label">Release Date:</label>
					<InputDate @bind-Value="game.ReleaseDate" id="releaseDate" class="form-control" />
				</div>
				<button type="submit" class="btn btn-primary">Save</button>
				<a role="button" class="btn btn-secondary" href="/">Cancel</a>
			</EditForm>
		</div>
	</div>
}



@code {
	[Parameter]
	public int? Id { get; set; }

	[SupplyParameterFromForm]
	private GameDetails? game { get; set; }

	private Genre[]? genres;

	private string _title = string.Empty;

	protected override async Task OnParametersSetAsync()
	{
		if (game is not null)
		{
			return;
		}

		if (Id is not null)
		{
			game = await GamesClient.GetGame(Id.Value);
			_title = $"Edit {game.Name}";
		}
		else
		{
			game = new() { Name = string.Empty, ReleaseDate = DateOnly.FromDateTime(DateTime.UtcNow) };
			_title = "New Game";
		}
	}

	protected override async Task OnInitializedAsync()
	{
		genres = await GenresClient.GetGenres();
	}

	private async Task HandleSubmitAsync()
	{
		ArgumentNullException.ThrowIfNull(game);

		if (Id is null)
		{
			await GamesClient.AddGame(game);
		}
		else
		{
			game.Id = Id.Value;
			await GamesClient.UpdateGame(game);
		}

		NavigationManager.NavigateTo("/");
	}
}
