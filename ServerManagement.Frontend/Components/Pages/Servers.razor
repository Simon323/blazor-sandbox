@page "/servers"
@inject NavigationManager NavigationManager

<h3>Servers</h3>


<div class="container-fluid text-center">
	<div class="row">
		@foreach (var city in cities)
		{
			<div class="col-2">
				<div class="card" style="width: 100%">
					<img src="@($"/images/{city}.png")" class="card-img-top" alt="@city">
					<div class="card-body">
						<button type="button" class="btn btn-primary mb-2">
							@city
						</button>
					</div>
				</div>
			</div>
		}
	</div>
</div>

<p>
	<ServerComponent />
</p>

<ul>
	@foreach (var server in servers)
	{
		<li>
			@server.Name is @server.City is
			<span style="color: @((server.IsOnline?"green":"red"))">
				@(server.IsOnline ? "Online" : "Offline")
			</span>
			&nbsp;
			<a href="/servers/@server.ServerId" class="btn btn-link">Edit</a>
			&nbsp;

			<EditForm Model="@server" FormName="@($"form-server-{server.ServerId}")" OnValidSubmit="@(async () => await DeleteServer(server.ServerId))">
				<InputNumber @bind-Value="server.ServerId" class="form-control" hidden />
				<button type="submit" class="btn btn-primary">Delete</button>
			</EditForm>
		</li>
	}
</ul>

<p>
	<a href="/servers/add" class="btn btn-primary">Add Server</a>
</p>

@code {
	private List<Server> servers = ServersRepository.GetServersByCity("New York");

	private List<string> cities = CitiesRepository.GetCities();

	private async Task DeleteServer(int serverId)
	{
		if (serverId > 0)
		{
			ServersRepository.DeleteServer(serverId);
		}

		NavigationManager.Refresh();
		await Task.CompletedTask;
	}
}
